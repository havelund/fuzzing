
spec_ranges = """
    rule FUZZ_CMD_UNSIGNED_ARG_1:
      always
        FUZZ_CMD_UNSIGNED_ARG_1(
          fuzz_cmd1_arg_1=x1?,
          fuzz_cmd1_arg_2=x2?,
          fuzz_cmd1_arg_3=x3?) =>
            (1 <= x1 <= 800 and 1 <= x2 <= 200 and 1 <= x3 <= 10)

    rule FUZZ_CMD_FLOAT_4:
      always
        FUZZ_CMD_FLOAT_4(
          fuzz_cmd4_arg_1=x1?,
          fuzz_cmd4_arg_2=x2?,
          fuzz_cmd4_arg_3=x3?) =>
            (-1 <= x1 <= 1 and -1 <= x2 <= 1 and -1 <= x3 <= 1)

    rule FUZZ_CMD_MIXED_5:
      always
        FUZZ_CMD_MIXED_5(
          fuzz_cmd5_arg_1=x1?,
          fuzz_cmd5_arg_2=x2?,
          fuzz_cmd5_arg_3=x3?,
          fuzz_cmd5_arg_4=x4?,
          fuzz_cmd5_arg_5=x5?) =>
            (
              (x1 = "fuzz_val_1" or x1 = "fuzz_val_2" or x1 = "fuzz_val_3")
              and
              (x2 = "DISABLE" or x2 = "ENABLE")
              and
              (-2 <= x3 <= 2)
              and
              (-2 <= x4 <= 2)
            )

    rule FUZZ_CMD_ENUM_2:
      always
        FUZZ_CMD_ENUM_2(
          fuzz_cmd2_arg_1=x1?,
          fuzz_cmd2_arg_2=x2?) =>
            (
              (x1 = "fuzz_val_1" or x1 = "fuzz_val_2" or x1 = "fuzz_val_3")
              and
              (x2 = "DISABLE" or x2 = "ENABLE")
            )
    """

spec_test1 = """
    #rule p1: always FUZZ_CMD_UNSIGNED_ARG_1(fuzz_cmd1_arg_1=x?) =>
    #              eventually FUZZ_CMD_MIXED_5(fuzz_cmd5_arg_5=x)

    #rule p2: eventually FUZZ_CMD_UNSIGNED_ARG_1()

    #rule q1: always FUZZ_CMD_UNSIGNED_ARG_1(fuzz_cmd1_arg_1=x1?) => 1 <= x1 <= 3

    #rule p3: eventually FUZZ_CMD_STRING_3()

    #rule p4: eventually FUZZ_CMD_FLOAT_4()

    #rule p5_1: count (9,9) FUZZ_CMD_ENUM_2(fuzz_cmd2_arg_1="fuzz_val_2")

    # -----------------------------------------------------------------------------
    #rule p5_2: count (2,2) (FUZZ_CMD_ENUM_2(fuzz_cmd2_arg_1=x?) => x="fuzz_val_2")
    rule k1: eventually FUZZ_CMD_ENUM_2(fuzz_cmd2_arg_1="fuzz_val_2")
    rule k2: count (2,2) FUZZ_CMD_ENUM_2(fuzz_cmd2_arg_1=x?) => x="fuzz_val_2"
    # -----------------------------------------------------------------------------

    #rule p5_3: always FUZZ_CMD_ENUM_2(fuzz_cmd2_arg_1=x?) => x="fuzz_val_2"

    #rule p6: count(5,6) FUZZ_CMD_ENUM_2()

    #rule p7: always
    #           (FUZZ_CMD_UNSIGNED_ARG_1(fuzz_cmd1_arg_1=x?) => (x < 796))

    #rule p8: next next next next FUZZ_CMD_UNSIGNED_ARG_1()

    #rule p9: always FUZZ_CMD_UNSIGNED_ARG_1(fuzz_cmd1_arg_1=x?) =>
    #           sofar FUZZ_CMD_UNSIGNED_ARG_1(fuzz_cmd1_arg_1=x)

    # rule k1: eventually FUZZ_CMD_STRING_3()
    # rule k2: always FUZZ_CMD_STRING_3(fuzz_cmd3_arg_1=x?) => x = "jpl"
    # rule k3: count (2,2) FUZZ_CMD_STRING_3(fuzz_cmd3_arg_1=x?) => x = "jpl"

    # rule l1: eventually FUZZ_CMD_UNSIGNED_ARG_1()
    # rule l2: count (2,2) FUZZ_CMD_UNSIGNED_ARG_1(fuzz_cmd1_arg_1=x?) => x = 777
    """